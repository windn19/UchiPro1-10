# 2. Напиши программу, в которой создай класс Point. Реализуй в классе следующие методы:
#     • __init__(x, y) — добавляет объекту атрибуты x и y, если не указаны то по умолчанию 0;
#     • геттеры для атрибутов x и y — возвращают значение соответствующего атрибута;
#     • сеттеры для атрибутов x и y — изменяют значение атрибута, если новое значение >= 0, иначе на экран выводится
#     сообщение «Координата должна быть >= 0» и значение атрибута не меняется.
#     • __str__() — возвращает строку вида «Point({x}, {y})», например «Point(3, 5)».
#
# При решении задачи используй инкапсуляцию, ограничь прямой доступ к атрибутам, используй property() или @property.
# Создай экземпляр класса Point, затем cчитай с клавиатуры одну строку, содержащую два целых числа через пробел —
# координаты x и y. Установи значения атрибутов x и y, затем выведи строковое представление объекта.
#
# Входные данные:
# Вводится одна строка содержащая два целых числа через пробел.
# Выходные данные:
# Выводится строка или несколько строк.
#
# Пример работы программы:
# point = Point()
# point.x = -1
# point.y = 3
# point.x = 5
# print(point)
# Вывод:
# Координата должна быть >= 0
# Point(5, 3)
#
# Пример ввода:
# -1 3
# Пример вывода:
# Координата должна быть >= 0
# Point(0, 3)

class Point:
    def __init__(self, x=0, y=0):
        self.__x = x
        self.__y = y

    @property
    def x(self):
        return self.__x

    @x.setter
    def x(self, value):
        if value >= 0:
            self.__x = value
        else:
            print('Координата должна быть >= 0')

    @property
    def y(self):
        return self.__y

    @y.setter
    def y(self, value):
        if value >= 0:
            self.__y = value
        else:
            print('Координата должна быть >= 0')

    def __str__(self):
        return f'Point({self.x}, {self.y})'


x, y = map(int, input().split())
point = Point()
point.x = x
point.y = y
print(point)

# point = Point()
# point.x = -1
# point.y = 3
# point.x = 5
# print(point)
